{"version":3,"file":"index.modern.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\ninterface ListExtenderProps {\n  placeholder?: string;\n  validators?: [\n    (value: string, index?: number, list?: { [key: number]: string }) => boolean\n  ];\n  values?: string[];\n}\n\nexport const ListExtender = ({\n  placeholder = '',\n  validators,\n  values = [],\n}: ListExtenderProps) => {\n  const listObj: {[key: number]: string} = {}\n  const inputObj: {[key: number]: boolean} = {}\n  for (let i = 0; i < values.length; i++) {\n    listObj[i] = values[i]\n    inputObj[i] = false\n  }\n  const [list, setList] = useState<{ [key: number]: string }>(listObj);\n  const [isInput, setIsInput] = useState<{ [key: number]: boolean }>(inputObj);\n\n  // on list changed\n  useEffect(() => {\n    let addInput = true;\n    Object.keys(list).forEach((key) => {\n      if (!list[key].trim() || !validate(list[key], parseInt(key))) {\n        addInput = false;\n      }\n    });\n    if (addInput) {\n      setList((prevList) => {\n        const newList = { ...prevList };\n        newList[Object.keys(newList).length] = \"\";\n        return newList;\n      });\n      setIsInput((prevInput) => {\n        const newIsInput = { ...prevInput };\n        newIsInput[Object.keys(newIsInput).length] = true;\n        return newIsInput;\n      });\n    }\n  }, [list]);\n\n  // check if all validations pass\n  const validate = (value: string, index?: number) => {\n    if (!validators) {\n      return true;\n    }\n    for (let validator of validators) {\n      if (!validator(value, index, list)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // change the text of an element\n  const setListText = (index: number, value: string) => {\n    setList((prevList) => {\n      const newList = { ...prevList };\n      newList[index] = value;\n      return newList;\n    });\n  };\n\n  // change whether el is input or text\n  const toggleInput = (index: number) => {\n    if (isInput[index] && !list[index].trim()) {\n      return;\n    }\n    setIsInput((prevInput) => {\n      const newList = { ...prevInput };\n      newList[index] = !newList[index];\n      return newList;\n    });\n  };\n\n  return (\n    <ul>\n      {Object.keys(list).map((key, index) => {\n        if (isInput[index]) {\n          return (\n            <li>\n              <input\n                key={index}\n                value={list[key]}\n                placeholder={placeholder}\n                onChange={(e) => setListText(index, e.target.value)}\n                onBlur={() => toggleInput(index)}\n                autoFocus={index !== Object.keys(list).length - 1}\n              />\n            </li>\n          );\n        } else {\n          return (\n            <li key={index} onDoubleClick={() => toggleInput(index)}>\n              {list[key]}\n            </li>\n          );\n        }\n      })}\n    </ul>\n  );\n};\n\nexport default ListExtender;\n"],"names":["ListExtender","placeholder","validators","values","listObj","inputObj","i","length","list","setList","useState","isInput","setIsInput","useEffect","addInput","Object","keys","forEach","key","trim","validate","parseInt","prevList","newList","prevInput","newIsInput","value","index","validator","setListText","toggleInput","React","map","onChange","e","target","onBlur","autoFocus","onDoubleClick"],"mappings":"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"}